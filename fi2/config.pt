app {
    window {
        x = 100;
        y = 100;
        w = 400;
        h = 200;
    }
}

geom {
    cx : float = 0;
    cy : float = 0;
    cw : float = 0;
    ch : float = 0;
    x : dimension = 10.0;
    y : dimension = 10.0;
    w : dimension = 40.0;
    h : dimension = 40.0;
}

container { 
    geom : geom {
         x=10;
         x=10;
         y=10;
         w=100;
         h=50;
    }
    class = ui::Container;
    hpolicy = centre;
    vpolicy = space;
    color : Color = { 0,1,1,1 };
}

circle {
    geom : geom {
        w = 100.0;
        h = 100.0;
    }
    color : Color = { 0,1,0,1 };
    class = ui::Circle;
}  

horizontal_container : container {
    hpolicy = space;
    vpolicy = centre;
}

vertical_container : container {
    hpolicy = centre;
    vpolicy = space;
}

centre_container : container {
    hpolicy = centre;
    vpolicy = centre;
}

vctest2 : centre_container {
    sub {    
        myCircle11 : circle {
            color : Color = { 1,0,0,1 };
            geom {
                w = 200.0;
                h = 200.0;
            }
        }
        myCircle13 : circle {
            color : Color = { 0,1,0,1 };
            geom {
                w = 150.0;
                h = 150.0;
            }
        }
        myCircle1 : circle {
            color : Color = { 1,1,0,1 };
        }
    }
}


vctest3 : horizontal_container {
    sub {    
        myCircle11 : circle {
            color : Color = { 0,1,0,1 };
        }
        myCircle13 : circle {
            color : Color = { 0,1,0,1 };
        }
        myCircle1 : circle {
            color : Color = { 0,1,0,1 };
        }
    }
}

vctest1 : vertical_container {
    sub {    
        myCircle11 : circle {
            color : Color = { 1,0,0,1 };
        }
        myCircle13 : circle {
            color : Color = { 0,1,0,1 };
        }
        myCircle1 : circle {
            color : Color = { 1,1,0,1 };
        }
        myCircle2 : circle {
            color : Color = { 1,0,0,1 };
        }
        myCircle3 : circle {
            color : Color = { 0,1,0,1 };
        }
        myCircle12 : circle {
            color : Color = { 0.2,0.2,0.2,1 };
        }
    }
}

light : circle {
    geom {
        w=50;
        h=50;
    }
    color : Color = { 1,0,0,1 };
}

three_lights : horizontal_container {
    geom {
        w=200;
        h=100;
    }
    color : Color = {0,1,0,1};
    sub {
            circle1 : circle {
                geom {
                    w=50;
                    h=50;
                }
            color : Color = { 1,0,0,1 };
        }
        circle2 : circle {
                geom {
                    w=50;
                    h=50;
                }
            color : Color = { 0,1,0,1 };
        }
        circle3 : circle {
                geom {
                    w=50;
                    h=50;
                }
            color : Color = { 0,1,1,1 };
        }
    }
}

button {
    class = ui::Button;
    geom :geom {
        w = 300;
        h = 100;
    }
    text = "Foo";
    textSize = 20;
    color : Color = { 1,0.5,0,1 };
    highlightColor : Color = {1,0,0,1};
}

test0 : vertical_container {
    geom {
        w=500;
        h=700;
    }
    sub {
        b1 : button {

        }
        b2 : button {

        }
        b3 : button {

        }
        b4 : button {

        }
        b5 : button {

        }
        b6 : button {

        }
//        light : circle {
//        }
//        c1 : three_lights {
//        }
//        c2 : three_lights {
//        }
//        c3 : three_lights {
//        }
//        c4 : three_lights {
//        }
    }
//    hpolicy = space;
//    vpolicy = centre;
}

myButton : button {
    geom {
        h=80;
        w=500;
    }
    text = "oooooo!";
    color = { 0,1,0,1};
}

test1 : vertical_container {
    geom {
        w=1200;
        h=800;
    }
    sub {
        : horizontal_container {
            geom {
                w=100%;
                h=200;
            }

            sub {
                : myButton {text="Foo!";}
                : myButton {
                    text="Exit";
                    onClick {
                        function = ExitClick;
                    }
                }
            }
        }
        : horizontal_container {
            geom {
                w=1100;
                h=200;
            }

            sub {
                : myButton {text="So something";}
                : myButton {text="Do something else";}
            }
        }
    }
//    hpolicy = space;
//    vpolicy = centre;
}

test2 : vertical_container {
    geom {
        w=500;
        h=700;
    }
    sub {
        : horizontal_container {
            geom {
                w=600;
                h=400;
            }
        }
    }
}

deepbutton : button {
    text = "A";
    textSize = 10;
    geom {
        w = 50;
        h = 50;
    }
}

deepnode : horizontal_container {
            geom {
                w=30%;
                h=90%;
            }
            color : Color = { 1,1,0,1 };
            sub {
                : vertical_container {
                    geom {
                        w=30%;
                        h=90%;
                    }
                    sub {
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                    }
                }
                : vertical_container {
                    geom {
                        w=30%;
                        h=90%;
                    }
                    sub {
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                    }
                }
                : vertical_container {
                    geom {
                        w=30%;
                        h=90%;
                    }
                    sub {
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                    }
                }
            }
}



test3 : horizontal_container {
    geom {
        w=700;
        h=450;
    }
    sub {
        : deepnode {
        }
        : deepnode {
        }
        : deepnode {
        }
    }
}

textbox {
    geom : geom {
        w = 400;
        h = 200;
    }
    text = "TEXT!";
    class = ui::TextBox;

    frameColor : Color = { 1,1,0,1 };
    textSize = 20;
}

test4 :  horizontal_container {
    geom {
        w=700;
        h=450;
    }
    sub {
        : circle {
            geom {
                x = 200;
                y = 100;
            }
        }
        : button {
            geom {
                x = 100;
                y = 100;
                w = 100;
                h = 50;
            }
        }
        : horizontal_container {
            geom {
                x = 300;
                y = 400;
            }
        }
        : textbox {
            geom {
                x = 100;
                y = 300;
                w = 200;
                h=100;
            }
            text = "Bing and gone";
        }
    }
}

test5 :  horizontal_container {
    geom {
        w=700;
        h=450;
    }
    sub {
        : horizontal_container {
            color = { 1,1,0,1 };
        }
        : button {
            geom {
                w = 200;
            }
        }
        : textbox {
            geom {
                w = 200;
            }
        }
        : circle {
            geom {
                x = 20;
                y = 20;
            }
        }
    }
}

shaders {
    biquad {
        vertex <<
            #version 450 core
            out vec2 uv_g;
            out vec4 col_g;
            layout (location = 0) in vec3 aPos;
            layout (location = 1) in vec2 aTexCoord;
            layout (location = 2) in vec4 aColour;
            void main()
            {
                uv_g = aTexCoord;
                col_g = aColour;
                gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);
            }
>>;
        geometry <<
                #version 450 core

        layout (triangles_adjacency) in;
        layout (triangle_strip, max_vertices = 4) out;

        in vec2 uv_g[6];
        out vec2 uv_f;
        in vec4 col_g[6];
        out vec4 col_f;
        flat out vec4 colv_f[4];

        void main() {
            for (int i = 0; i < 4; i++) {
                colv_f[i] = col_g[i];
            }


            for (int i = 0; i < 4; i++) {
                gl_Position = gl_in[i].gl_Position;
                col_f = col_g[i];
                uv_f = uv_g[i];

                EmitVertex();
            }
            EndPrimitive();
}
>>;
    fragment  <<
                #version 450 core
                in vec2 uv_f;
                in vec4 col_f;
                out vec4 FragColor;
                flat in vec4 colv_f[4];

                void main()
                {
                    vec4 a = mix(colv_f[0],colv_f[1],uv_f.y);
                    vec4 b = mix(colv_f[2],colv_f[3],uv_f.y);
                    vec4 c = mix(a,b,uv_f.x);

                    FragColor = c;

                }

>>;
    }
}

test {
    A = 0;
    B = 12;
}

render {
    object {
        section {
           shader = shaders.biquad;
            verts : Vector3fList = {
                -0.25, 0.25, 0,
                -0.25, -0.25, 0,
                -0.75, 0.25, 0,
                -0.75, -0.25, 0,
                -0.5, 0, 0,
                -0.5, 0, 0,

                0.75, 0.25, 0,
                0.75, -0.25, 0,
                0.25, 0.25, 0,
                0.25, -0.25, 0,
                0.5, 0, 0,
                0.5, 0, 0
            };
        }
    }
}

test {
    @b=properties.render.object.section.verts;
	value = ref(@b);
}

main {
}

foo {
//    @haha = hello;
    //test = @haha;
}