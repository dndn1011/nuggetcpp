
a {
    b = 1;
}


// stop pasring here
//@stop = 1;


tests {
    t0001 {
            mat : Matrix4f = {
                1,5,9,9,
                6,9,8,4,
                4,0,2,6,
                7,4,2,2
            };

            vec : Vector4f = {
                4,4,4,7
            };

            result : Vector4f = {
                123,120,66,66
            };
    }
    t0002 {
            mat : Matrix4f = {
                1,2,2,0,
                8,8,6,9,
                5,2,9,7,
                7,9,1,5
            };

            vec : Vector4f = {
                4,6,5,3
            };

            result : Vector4f = {
                26,137,98,102
            };
    }
    t0003 {
            mat : Matrix4f = {
                7,7,9,0,
                4,0,2,1,
                2,5,6,4,
                0,4,6,3
            };

            vec : Vector4f = {
                7,4,3,4
            };

            result : Vector4f = {
                104,38,68,46
            };
    }
    t0004 {
            mat : Matrix4f = {
                6,8,9,4,
                2,8,9,2,
                0,8,9,9,
                3,2,3,5
            };

            vec : Vector4f = {
                5,4,7,3
            };

            result : Vector4f = {
                137,111,122,59
            };
    }
    t0005 {
            mat : Matrix4f = {
                3,7,9,8,
                2,2,6,5,
                9,2,1,0,
                8,3,9,5
            };

            vec : Vector4f = {
                9,2,2,7
            };

            result : Vector4f = {
                115,69,87,131
            };
    }
    t0006 {
            mat : Matrix4f = {
                7,1,6,2,
                7,4,9,0,
                9,8,7,3,
                5,8,9,5
            };

            vec : Vector4f = {
                3,4,3,1
            };

            result : Vector4f = {
                45,64,83,79
            };
    }
    t0007 {
            mat : Matrix4f = {
                7,6,2,9,
                4,2,0,9,
                8,9,3,1,
                5,1,3,5
            };

            vec : Vector4f = {
                3,5,5,8
            };

            result : Vector4f = {
                133,94,92,75
            };
    }
    t0008 {
            mat : Matrix4f = {
                2,9,9,4,
                8,7,8,4,
                2,5,0,2,
                4,8,3,3
            };

            vec : Vector4f = {
                1,8,6,0
            };

            result : Vector4f = {
                128,112,42,86
            };
    }
    t0009 {
            mat : Matrix4f = {
                8,1,3,9,
                4,4,2,1,
                9,8,2,7,
                5,7,1,9
            };

            vec : Vector4f = {
                3,9,4,3
            };

            result : Vector4f = {
                72,59,128,109
            };
    }
    t0010 {
            mat : Matrix4f = {
                2,1,7,9,
                3,7,8,5,
                9,6,2,7,
                4,6,1,3
            };

            vec : Vector4f = {
                4,5,8,6
            };

            result : Vector4f = {
                123,141,124,72
            };
    }
}

app {
    window {
        x = -1200;
        y = 100;
        w = 900;
        h = 500;
    }
}

database {
    service = sqlite3;
    file = "database/db.sqlite3";
    extension = "../sqlite3_extensions/x64/Debug/sqlite3_nidhash.dll";
    extension_entry = "sqlite3_nidhash_init";
}

assets {
    config {
        textures = "assets/textures";
    }
    meta {
        spaceship {
            path = "assets/textures/spaceship.png";
            type = texture;
            description = "test image";
        }
    }
}

geom {
    cx : float = 0;
    cy : float = 0;
    cw : float = 0;
    ch : float = 0;
    x : dimension = 10.0;
    y : dimension = 10.0;
    w : dimension = 40.0;
    h : dimension = 40.0;
}
container { 
    geom : geom {
         x=10;
         x=10;
         y=10;
         w=100;
         h=50;
    }
    class = ui::Container;
    hpolicy = centre;
    vpolicy = space;
    color : Color = { 0,1,1,1 };
}

circle {
    geom : geom {
        w = 100.0;
        h = 100.0;
    }
    color : Color = { 0,1,0,1 };
    class = ui::Circle;
}  

horizontal_container : container {
    hpolicy = space;
    vpolicy = centre;
}

vertical_container : container {
    hpolicy = centre;
    vpolicy = space;
}

centre_container : container {
    hpolicy = centre;
    vpolicy = centre;
}

vctest2 : centre_container {
    sub {    
        myCircle11 : circle {
            color : Color = { 1,0,0,1 };
            geom {
                w = 200.0;
                h = 200.0;
            }
        }
        myCircle13 : circle {
            color : Color = { 0,1,0,1 };
            geom {
                w = 150.0;
                h = 150.0;
            }
        }
        myCircle1 : circle {
            color : Color = { 1,1,0,1 };
        }
    }
}


vctest3 : horizontal_container {
    sub {    
        myCircle11 : circle {
            color : Color = { 0,1,0,1 };
        }
        myCircle13 : circle {
            color : Color = { 0,1,0,1 };
        }
        myCircle1 : circle {
            color : Color = { 0,1,0,1 };
        }
    }
}

vctest1 : vertical_container {
    sub {    
        myCircle11 : circle {
            color : Color = { 1,0,0,1 };
        }
        myCircle13 : circle {
            color : Color = { 0,1,0,1 };
        }
        myCircle1 : circle {
            color : Color = { 1,1,0,1 };
        }
        myCircle2 : circle {
            color : Color = { 1,0,0,1 };
        }
        myCircle3 : circle {
            color : Color = { 0,1,0,1 };
        }
        myCircle12 : circle {
            color : Color = { 0.2,0.2,0.2,1 };
        }
    }
}

light : circle {
    geom {
        w=50;
        h=50;
    }
    color : Color = { 1,0,0,1 };
}

three_lights : horizontal_container {
    geom {
        w=200;
        h=100;
    }
    color : Color = {0,1,0,1};
    sub {
            circle1 : circle {
                geom {
                    w=50;
                    h=50;
                }
            color : Color = { 1,0,0,1 };
        }
        circle2 : circle {
                geom {
                    w=50;
                    h=50;
                }
            color : Color = { 0,1,0,1 };
        }
        circle3 : circle {
                geom {
                    w=50;
                    h=50;
                }
            color : Color = { 0,1,1,1 };
        }
    }
}

button {
    class = ui::Button;
    geom :geom {
        w = 300;
        h = 100;
    }
    text = "Foo";
    textSize = 20;
    color : Color = { 1,0.5,0,1 };
    highlightColor : Color = {1,0,0,1};
}

test0 : vertical_container {
    geom {
        w=500;
        h=700;
    }
    sub {
        b1 : button {

        }
        b2 : button {

        }
        b3 : button {

        }
        b4 : button {

        }
        b5 : button {

        }
        b6 : button {

        }
//        light : circle {
//        }
//        c1 : three_lights {
//        }
//        c2 : three_lights {
//        }
//        c3 : three_lights {
//        }
//        c4 : three_lights {
//        }
    }
//    hpolicy = space;
//    vpolicy = centre;
}

myButton : button {
    geom {
        h=80;
        w=500;
    }
    text = "oooooo!";
    color = { 0,1,0,1};
}

test1 : vertical_container {
    geom {
        w=1200;
        h=800;
    }
    sub {
        : horizontal_container {
            geom {
                w=100%;
                h=200;
            }

            sub {
                : myButton {text="Foo!";}
                : myButton {
                    text="Exit";
                    onClick {
                        function = ExitClick;
                    }
                }
            }
        }
        : horizontal_container {
            geom {
                w=1100;
                h=200;
            }

            sub {
                : myButton {text="So something";}
                : myButton {text="Do something else";}
            }
        }
    }
//    hpolicy = space;
//    vpolicy = centre;
}

test2 : vertical_container {
    geom {
        w=500;
        h=700;
    }
    sub {
        : horizontal_container {
            geom {
                w=600;
                h=400;
            }
        }
    }
}

deepbutton : button {
    text = "A";
    textSize = 10;
    geom {
        w = 50;
        h = 50;
    }
}

deepnode : horizontal_container {
            geom {
                w=30%;
                h=90%;
            }
            color : Color = { 1,1,0,1 };
            sub {
                : vertical_container {
                    geom {
                        w=30%;
                        h=90%;
                    }
                    sub {
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                    }
                }
                : vertical_container {
                    geom {
                        w=30%;
                        h=90%;
                    }
                    sub {
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                    }
                }
                : vertical_container {
                    geom {
                        w=30%;
                        h=90%;
                    }
                    sub {
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                        : deepbutton {}
                    }
                }
            }
}



test3 : horizontal_container {
    geom {
        w=700;
        h=450;
    }
    sub {
        : deepnode {
        }
        : deepnode {
        }
        : deepnode {
        }
    }
}

textbox {
    geom : geom {
        w = 400;
        h = 200;
    }
    text = "TEXT!";
    class = ui::TextBox;

    frameColor : Color = { 1,1,0,1 };
    textSize = 20;
}

test4 :  horizontal_container {
    geom {
        w=700;
        h=450;
    }
    sub {
        : circle {
            geom {
                x = 200;
                y = 100;
            }
        }
        : button {
            geom {
                x = 100;
                y = 100;
                w = 100;
                h = 50;
            }
        }
        : horizontal_container {
            geom {
                x = 300;
                y = 400;
            }
        }
        : textbox {
            geom {
                x = 100;
                y = 300;
                w = 200;
                h=100;
            }
            text = "Bing and gone";
        }
    }
}

test5 :  horizontal_container {
    geom {
        w=700;
        h=450;
    }
    sub {
        : horizontal_container {
            color = { 1,1,0,1 };
        }
        : button {
            geom {
                w = 200;
            }
        }
        : textbox {
            geom {
                w = 200;
            }
        }
        : circle {
            geom {
                x = 20;
                y = 20;
            }
        }
    }
}

shaders {
    biquad {
        vertex <<
            #version 450 core
            out vec2 uv_g;
            out vec4 col_g;
            layout (location = 0) in vec3 aPos;
            layout (location = 1) in vec2 aTexCoord;
            layout (location = 2) in vec4 aColour;
            void main()
            {

                uv_g = aTexCoord;
                col_g = aColour;
                gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);
            }
>>;
        geometry <<
                #version 450 core

        layout (triangles_adjacency) in;
        layout (triangle_strip, max_vertices = 4) out;
        layout (triangle_strip, max_vertices = 4) out;

        in vec2 uv_g[6];
        out vec2 uv_f;
        in vec4 col_g[6];
        out vec4 col_f;
        flat out vec4 colv_f[4];

        void main() {
            for (int i = 0; i < 4; i++) {
                colv_f[i] = col_g[i];
            }


            for (int i = 0; i < 4; i++) {
                gl_Position = gl_in[i].gl_Position;
                col_f = col_g[i];
                uv_f = uv_g[i];

                EmitVertex();
            }
            EndPrimitive();
}
>>;
    fragment  <<
                #version 450 core
                in vec2 uv_f;
                in vec4 col_f;
                out vec4 FragColor;
                flat in vec4 colv_f[4];
                uniform sampler2D quadTexture;

                void main()
                {
                    vec4 a = mix(colv_f[0],colv_f[1],uv_f.y);
                    vec4 b = mix(colv_f[2],colv_f[3],uv_f.y);
                    vec4 c = mix(a,b,uv_f.x);

                    vec2 r = vec2(-uv_f.y,-uv_f.x)*1.0;

    //                FragColor = c;
   //                 FragColor = vec4(1,0,0,1);
                        FragColor = texture(quadTexture, r) + c/2;
                }

>>;
    }
}

quad {
    verts : Vector3fList = {
        0.25, 0.25, 0,
        0.25, -0.25, 0,
        -0.25, 0.25, 0,
        -0.25, -0.25, 0,


        0, 0, 0, 0, 0, 0,
    };
    uvs : Vector2fList = {
        0.0f, 1.0f,  // tr
        1.0f, 1.0f,  // br
        0.0f, 0.0f,  // tl
        1.0f, 0.0f,  // bl

        0,0,0,0
    };
    colors : ColorList = {
        1,0,0,1,
        0,1,0,1,
        0,0,1,1,
        0,0.5,0.5,1,

        0,0,0,0,0,0,0,0,
    };
}

testobj {
    section {
        texture = spaceship;
        slot = 0;

        renderMatrix : Matrix4f = {
            2,0,0,0,
            0,2,0,0,
            0,0,2,0,
            0,0,0,1,
        };

        shader = shaders.biquad;
        primitive = GL_TRIANGLES_ADJACENCY;
        start = 0;
        length = 24;

        @scale = 1.0;
        v : Vector3f = { 0.5,0.2,0.0 };
        s : Vector3f = { @scale,@scale,@scale };

//        v1 = (ref(quad.verts)*ref(@here.s)) - ref(@here.v) * 2.5;
//        v2 = (ref(quad.verts)*ref(@here.s)) - ref(@here.v) * 0.0;
//        v3 = (ref(quad.verts)*ref(@here.s)) - ref(@here.v) * -2.5;

        /////////////////////////////////////////

        j : Vector3f = { 0.0,0.1,0.0};

        v1 = ref(quad.verts)*ref(@here.s)*0.5 + ref(@here.v) * 0.8 + ref(@here.j);
        v2 = ref(quad.verts)*ref(@here.s)*0.8 + ref(@here.v) * 0.0 + ref(@here.j);
        v3 = ref(quad.verts)*ref(@here.s)*1.2 + ref(@here.v) * -1.25;
        v4 = ref(quad.verts)*ref(@here.s)*0.4 + ref(@here.v) * 1.4;

        u1 = ref(quad.uvs);

//        verts = concat(ref(@here.v1),ref(@here.v2),ref(@here.v3));
        
        /////////////////////////////////////////
        verts = concat(ref(@here.v1),ref(@here.v2),ref(@here.v3),ref(@here.v4));

        uvs = concat(ref(quad.uvs),ref(quad.uvs),ref(quad.uvs),ref(quad.uvs));
        colors = concat(ref(quad.colors),ref(quad.colors),ref(quad.colors),ref(quad.colors));

//        verts = ref(quad.verts);
//        uvs = ref(quad.uvs);
//        colors = ref(quad.colors);

        //verts = concat(ref(quad.verts)*ref(@here.s) - ref(@here.v)
        //, ref(quad.verts)*ref(@here.s) + ref(@here.v) *1.25
        //, ref(quad.verts)*ref(@here.s) + ref(@here.v) *0.5
        //);
//       verts = ref(quad.verts) * ref(@here.s) + ref(@here.v);
    }
}
render {
    scene {
        : = testobj;
    }
}
